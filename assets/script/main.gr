function randf() (real) {
    return rand(-1., 1.);
}

event onLoad() {
    /*Camera camera = Camera();
    setCamera(camera);*/
    let camera = getCamera();
    camera:position(0., .5, 2.);

    Light light = loadLight();
    light:position(0., 1., 0.);

    //Quad quad = loadQuad(light);
    //Model tree = loadModel("tree/scene", light);
    //Model grass = loadModel("grass/scene", light);
    //Model ground = loadModel("ground/scene", light);
    //Model bunny = loadModel("bunny/scene", light);
    //Model statue = loadModel("statue/scene", light);
    Model jupiter = loadModel("jupiter/scene", light);

    int nbAsteroids = 50;

    array(mat4) instanceMatrices;

    // Radius for asteroid belt
    real radius = 100.0f;

    // Standard deviation from radius
    real radiusDeviation = 25.0f;

    // Gets stuck?
    loop(nbAsteroids) {
        real x = randf();
        real y = (rand(0, 1) * 2 - 1) * sqrt(1.0f - x * x);

        real finalRadius = radius + randf() * radiusDeviation;
        
        vec3 position = vec3(randf() * 5., 0., 0.);
        /*if (randf() > 0.5f) {
            position = vec3(y * finalRadius, randf(), x * finalRadius);
        } else {
            position = vec3(x * finalRadius, randf(), y * finalRadius);
        }*/

        quat rotation = quat(1., 0., 0., 0.);
        vec3 scale = vec3(1., 1., 1.);

        mat4 instanceMatrix = packInstanceMatrix(position, rotation, scale);
        instanceMatrices ~= instanceMatrix;
    }

    Model asteroid = loadModel("asteroid/scene", light, nbAsteroids, instanceMatrices);
    Model asteroid2 = loadModel("asteroid/scene", light);
    asteroid2:position(vec3(50f, 0f, 0f));

    //bunny:position(vec3(1f, 0f, 0f));

    int counter;
    loop {
        // Draw calls
        light:draw();

        //quad:draw();
        //tree:draw();
        //grass:draw();
        //ground:draw();
        //bunny:draw();
        //statue:draw();
        jupiter:draw();
        asteroid:draw();
        asteroid2:draw();

        // Next frame
        counter++;
        yield
    }
}